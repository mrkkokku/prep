import pandas as pd

df2 = pd.read_csv('Data02.csv')

print(df2.shape)
'''
(46749, 9)
'''

print( df2.head() ) # 데이터들이 정형화 되어있지 않다.
'''
    결제수단            배송번호          배송시작일        ... 수량   주문경로   
    주문일
0  무통장입금  D-20181227-0000648-00  2019-01-07 오전 8:56  ...  1  PC쇼핑몰  20181227  
1  무통장입금  D-20181229-0000119-00  2019-01-03 오전 9:30  ...  2   모바일웹  20181229 
2  무통장입금  D-20181230-0000100-00  2019-01-03 오전 9:30  ...  1   모바일웹  20181230 
3  무통장입금  D-20181231-0000087-00  2019-01-03 오전 9:30  ...  1   모바일웹  20181231 
4  무통장입금  D-20181231-0000108-00  2019-01-07 오전 8:56  ...  1   모바일웹  20181231 

[5 rows x 9 columns]
'''

print( df2['배송시작일'] ) # 시리즈로 보면 object로 시간이 들어가 있다.
'''
0         2019-01-07 오전 8:56
1         2019-01-03 오전 9:30
2         2019-01-03 오전 9:30
3         2019-01-03 오전 9:30
4         2019-01-07 오전 8:56
                ...
46744     2017-12-29 오후 4:32
46745     2018-01-03 오전 9:45
46746     2018-01-02 오후 7:06
46747     2018-01-03 오후 2:00
46748    2018-01-03 오후 12:43
Name: 배송시작일, Length: 46749, dtype: object
'''

# object이기 때문에(비정형 데이터), pd.to_datetime(df2['배송시작일']) 을 써먹을 수 없다

# 이 데이터의 ####-##-## 만 가져온다면, pd.to_datetime을 사용할 수 있는 상황이다. 이걸 해보자
# 이때 쓰는 것이 apply()라는 함수 (마치 람다식과 같은 형태)

'''
def date_function(x):
    return x

df2['배송시작일'].apply(date_function) 
이라고 하면, 놀랍게도 배송시작일의 모든 밸류가 date_function을 한번씩 거쳐서 나오게 됨
'''

# 자 이걸 응용해서 처리해보자

def date_function(x):
    return x[:10]

print( df2['배송시작일'].apply(date_function) )
'''
0         2019-01-07 오전 8:56
1         2019-01-03 오전 9:30
2         2019-01-03 오전 9:30
3         2019-01-03 오전 9:30
4         2019-01-07 오전 8:56
                ...
46744     2017-12-29 오후 4:32
46745     2018-01-03 오전 9:45
46746     2018-01-02 오후 7:06
46747     2018-01-03 오후 2:00
46748    2018-01-03 오후 12:43
Name: 배송시작일, Length: 46749, dtype: object
0        2019-01-07
1        2019-01-03
2        2019-01-03
3        2019-01-03
4        2019-01-07
            ...
46744    2017-12-29
46745    2018-01-03
46746    2018-01-02
46747    2018-01-03
46748    2018-01-03
Name: 배송시작일, Length: 46749, dtype: object
'''

# 이 결과를 다시 응용해보자

df2['배송시작일(datetime)'] = pd.to_datetime( df2['배송시작일'].apply(date_function) )
df2['배송완료일(datetime)'] = pd.to_datetime( df2['배송완료일'].apply(date_function) )

print( df2[['배송시작일', '배송완료일', '배송시작일(datetime)', '배송완료일(datetime)']] )
'''
             배송시작일        배송완료일          배송시작일(datetime) 배송완료일 (datetime)
0       2019-01-07 오전 8:56  2019-01-11 오전 5:32      2019-01-07      2019-01-11      
1       2019-01-03 오전 9:30  2019-01-07 오전 5:32      2019-01-03      2019-01-07      
2       2019-01-03 오전 9:30  2019-01-07 오전 5:32      2019-01-03      2019-01-07      
3       2019-01-03 오전 9:30  2019-01-07 오전 5:32      2019-01-03      2019-01-07      
4       2019-01-07 오전 8:56  2019-01-11 오전 5:32      2019-01-07      2019-01-11      
...                    ...                 ...             ...             ...
46744   2017-12-29 오후 4:32  2018-01-02 오전 5:31      2017-12-29      2018-01-02      
46745   2018-01-03 오전 9:45  2018-01-07 오전 5:38      2018-01-03      2018-01-07      
46746   2018-01-02 오후 7:06  2018-01-11 오전 2:46      2018-01-02      2018-01-11      
46747   2018-01-03 오후 2:00  2018-01-06 오후 6:06      2018-01-03      2018-01-06      
46748  2018-01-03 오후 12:43  2018-01-07 오전 5:38      2018-01-03      2018-01-07      

[46749 rows x 4 columns]
'''

# 응용하는거 한번 해보자

print( df2['배송완료일(datetime)'] - df2['배송시작일(datetime)'] )
df2['배송시간'] = df2['배송완료일(datetime)'] - df2['배송시작일(datetime)']
# 시간의 경과를 나타내는 데이터타입인 timedelta가 나오고, 이건 넘파이쪽에서 나온 타입
''' 
0       4 days
1       4 days
2       4 days
3       4 days
4       4 days
         ...
46744   4 days
46745   4 days
46746   9 days
46747   3 days
46748   4 days
Length: 46749, dtype: timedelta64[ns]
'''

print( df2['배송시간'].describe() ) # 이렇게 놀라운 결과를 얻을 수 있다
'''
count                     46749
mean     4 days 04:38:57.008278
std      1 days 04:56:12.144368
min             0 days 00:00:00
25%             4 days 00:00:00
50%             4 days 00:00:00
75%             4 days 00:00:00
max            47 days 00:00:00
Name: 배송시간, dtype: object
'''

# 또 다른거 하나 해보자
print( df2['주문일'] )
'''
0        20181227
1        20181229
2        20181230
3        20181231
4        20181231
           ...
46744    20171229
46745    20171229
46746    20171230
46747    20171231
46748    20171231
Name: 주문일, Length: 46749, dtype: int64
'''

# 이걸 변형 해 보자, 하이픈 넣어주는 작업

def date_function2(x):
    result = str(x) # 이걸 넣음으로써 데이터타입을 object로 만들어서 인덱싱을 가능케 만들어 주는 것
    return result[:4] + '-' + result[5:7] + '-' + result[6:8]

print( df2['주문일'].apply(date_function2) )
'''
0        2018-22-27
1        2018-22-29
2        2018-23-30
3        2018-23-31
4        2018-23-31
            ...
46744    2017-22-29
46745    2017-22-29
46746    2017-23-30
46747    2017-23-31
46748    2017-23-31
Name: 주문일, Length: 46749, dtype: object
'''