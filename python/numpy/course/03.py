# 이번 시간에는 데이터를 직접 입력하지 않고
# np.array() 와 같은 효과를 내는 ndarray만들기는 해보는 시간

import numpy as np



print( np.empty([2,3]) )
# 2행3열 ndarray를 생성하고 아무값이나 넣어서 생성함
'''
[[ 4.64583300e-308  4.66664552e-308 -2.57703408e+010] 
 [-4.70231646e-064  2.26262303e-319  3.63151540e-297]]
 '''

a = np.array([[1,2,3], [4,5,6], [7,8,9]])

print( np.empty_like(a) )
# 인수의 형태를 그대로가진 empty ndarray 만드는 것
'''
[[   6881348    7340147    6357100]
 [   5439609    7471220    7209065]
 [       103  544435297 1751607666]]
'''

print( np.zeros((2,3)) )
# 0으로 초기화한 ndarray를 생성
# empty에다가 초기화를 한다고 보면 됨
# data type에 유의
# 인수 넣을때 넣는 방식에 유의, (2,3) 이런 식으로 들어감
'''
[[0. 0. 0.]
 [0. 0. 0.]]
 '''

print( np.zeros_like(a) )
'''
[[0 0 0]
 [0 0 0]
 [0 0 0]]
'''

print( np.ones((2,3)) )
# zeros와 비슷함
'''
[[1. 1. 1.]
 [1. 1. 1.]]
'''

print( np.ones_like(a) )
'''
[[1 1 1]
 [1 1 1]
 [1 1 1]]
'''

# 초기화 할때 zeros와 ones로 많이 씀
# 초기화 했는데 모르는 값들어가 있는게 굉장히 불편하기 때문


print( np.identity(2) )
# 단위행렬같은 느낌
# 인수로는 size가 들어감
'''
[[1. 0.]
 [0. 1.]]
'''

print( np.identity(3, dtype=int) )
# dtype을 지정한 것
'''
[[1 0 0]
 [0 1 0]
 [0 0 1]]
'''

# 이 아래론 자주 쓰진 않는 것들
print( np.eye(3) )
# identity와 비슷한데, 사이즈 조절이 좀 더 자유로운
# 결국, eye는 identity를 포괄 함
'''
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]
'''

print( np.eye(3,4) )
'''
[[1. 0. 0. 0.]
 [0. 1. 0. 0.]
 [0. 0. 1. 0.]]
'''


print( np.full((2,3), 10) )
# 이건 마치 ones에다가 10을 곱한것과 같음.
# 주로 ones 사용하는 경우가 많음
'''
[[10 10 10]
 [10 10 10]]
'''

print( np.arange(10) )
# default : 0
# step : 1
# 이건 그냥 ndarray 1차원으로 만드는 걸로 이해
'''
[0 1 2 3 4 5 6 7 8 9]
'''

print( np.arange(start=10, stop=20, step=1) )
# 이렇게 쓸 수 있다
'''
[10 11 12 13 14 15 16 17 18 19]
'''

print( np.linspace(2.0, 3.0, num=5) )
# linear space, 선형적으로 쭉 만들어 주는 것
'''
[2.   2.25 2.5  2.75 3.  ]
'''